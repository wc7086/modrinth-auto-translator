name: 'Auto Translate Modrinth App'

on:
  workflow_dispatch:
    inputs:
      modrinth_tag:
        description: 'ModrinthÁâàÊú¨Ê†áÁ≠æ (Â¶Ç: v0.8.2, Êàñ latest)'
        required: true
        default: 'latest'
        type: string
      target_languages:
        description: 'ÁõÆÊ†áËØ≠Ë®Ä (ÈÄóÂè∑ÂàÜÈöî)'
        required: false
        default: 'zh-CN,ja-JP,ko-KR,fr-FR,de-DE,es-ES'
        type: string
      skip_translation:
        description: 'Ë∑≥ËøáÁøªËØëÊ≠•È™§'
        required: false
        default: false
        type: boolean
  
  schedule:
    # ÊØèÂë®Êó•UTC 02:00ËøêË°åÔºåÊ£ÄÊü•ÊòØÂê¶ÊúâÊñ∞ÁâàÊú¨
    - cron: '0 2 * * 0'

env:
  MODRINTH_REPO: "modrinth/code"
  NODE_VERSION: '18'
  RUST_VERSION: 'stable'

jobs:
  setup-and-translate:
    runs-on: ubuntu-latest
    outputs:
      has-translations: ${{ steps.check-translations.outputs.has-translations }}
      modrinth-version: ${{ steps.setup-modrinth.outputs.version }}
      release-name: ${{ steps.setup-modrinth.outputs.release-name }}
    
    steps:
      - name: Checkout translator repository
        uses: actions/checkout@v4
        with:
          path: translator

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get Modrinth latest release
        id: get-latest
        if: github.event.inputs.modrinth_tag == 'latest' || github.event.inputs.modrinth_tag == ''
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/${{ env.MODRINTH_REPO }}/releases/latest | jq -r .tag_name)
          echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "üìã Latest Modrinth release: $LATEST_TAG"

      - name: Determine Modrinth version
        id: determine-version
        run: |
          if [ "${{ github.event.inputs.modrinth_tag }}" = "latest" ] || [ "${{ github.event.inputs.modrinth_tag }}" = "" ]; then
            VERSION="${{ steps.get-latest.outputs.latest-tag }}"
          else
            VERSION="${{ github.event.inputs.modrinth_tag }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üéØ Using Modrinth version: $VERSION"

      - name: Clone Modrinth source code
        id: setup-modrinth
        run: |
          VERSION="${{ steps.determine-version.outputs.version }}"
          echo "üì• Cloning Modrinth $VERSION..."
          
          git clone --depth 1 --branch $VERSION https://github.com/${{ env.MODRINTH_REPO }}.git modrinth-source
          
          cd modrinth-source
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit-sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "release-name=Modrinth-Multilang-$VERSION" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Cloned Modrinth $VERSION (commit: ${COMMIT_SHA:0:8})"
          
          # ÊòæÁ§∫È°πÁõÆÁªìÊûÑ
          echo "üìÅ Project structure:"
          ls -la
          echo "üì± App structure:"
          ls -la apps/app/ || echo "‚ö†Ô∏è App directory not found"

      - name: Install translation dependencies
        run: |
          cd translator
          npm install
          # ÂÆâË£ÖÈ¢ùÂ§ñ‰æùËµñ
          npm install glob @types/node

      - name: Extract translation strings
        id: extract
        run: |
          cd translator
          echo "üîç Extracting translations from Modrinth source..."
          
          # ËÆæÁΩÆÊ∫êÁ†ÅË∑ØÂæÑ
          export MODRINTH_SOURCE_PATH="../modrinth-source"
          
          # ËøêË°åÊèêÂèñËÑöÊú¨
          node scripts/extract-modrinth-translations.js ../modrinth-source modrinth-translations.json
          
          # Ê£ÄÊü•ÊèêÂèñÁªìÊûú
          if [ -f "modrinth-translations.json" ]; then
            TOTAL_KEYS=$(node -e "console.log(JSON.parse(require('fs').readFileSync('modrinth-translations.json', 'utf8')).totalKeys || 0)")
            echo "total-keys=$TOTAL_KEYS" >> $GITHUB_OUTPUT
            echo "üìä Extracted $TOTAL_KEYS translation keys"
          else
            echo "total-keys=0" >> $GITHUB_OUTPUT
            echo "‚ùå No translations extracted"
          fi

      - name: Check translations
        id: check-translations
        run: |
          cd translator
          TOTAL_KEYS="${{ steps.extract.outputs.total-keys }}"
          if [ "$TOTAL_KEYS" -gt 0 ]; then
            echo "has-translations=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Found $TOTAL_KEYS translation keys"
          else
            echo "has-translations=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No translations to process"
          fi

      - name: Setup target languages
        id: setup-languages
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.target_languages }}" ]; then
            LANGUAGES="${{ github.event.inputs.target_languages }}"
          else
            LANGUAGES="zh-CN,ja-JP,ko-KR,fr-FR,de-DE,es-ES"
          fi
          echo "languages=$LANGUAGES" >> $GITHUB_OUTPUT
          echo "üåç Target languages: $LANGUAGES"

      - name: Translate content
        if: steps.check-translations.outputs.has-translations == 'true' && !inputs.skip_translation
        env:
          TRANSLATION_API_KEY: ${{ secrets.TRANSLATION_API_KEY }}
          TRANSLATION_API_URL: ${{ secrets.TRANSLATION_API_URL }}
          TRANSLATION_MODEL: ${{ secrets.TRANSLATION_MODEL }}
        run: |
          cd translator
          echo "üåç Starting translation process..."
          
          # ËÆæÁΩÆÁõÆÊ†áËØ≠Ë®Ä
          export TARGET_LANGUAGES="${{ steps.setup-languages.outputs.languages }}"
          
          # ËøêË°åÁøªËØë
          node scripts/translate-modrinth.js modrinth-translations.json ../modrinth-source
          
          # Ê£ÄÊü•ÁøªËØëÁªìÊûú
          if [ -d "../modrinth-source/apps/app-frontend/src/locales" ]; then
            echo "‚úÖ Translation completed"
            echo "üìÅ Generated language directories:"
            ls -la ../modrinth-source/apps/app-frontend/src/locales/
          else
            echo "‚ùå Translation failed"
            exit 1
          fi

      - name: Upload translation artifacts
        if: steps.check-translations.outputs.has-translations == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: modrinth-translated-source
          path: |
            modrinth-source/
            translator/modrinth-translations.json
          retention-days: 7

  build-apps:
    needs: setup-and-translate
    if: always() && needs.setup-and-translate.outputs.has-translations == 'true'
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-22.04, windows-latest, macos-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Download translated source
        uses: actions/download-artifact@v4
        with:
          name: modrinth-translated-source
          path: .

      - name: Setup Rust
        if: startsWith(matrix.platform, 'macos')
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''
          target: x86_64-apple-darwin

      - name: Setup Rust
        if: "!startsWith(matrix.platform, 'macos')"
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''

      - name: Setup Rust cache
        uses: actions/cache@v4
        with:
          path: |
            modrinth-source/target
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-modrinth-app-${{ hashFiles('modrinth-source/apps/app/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-modrinth-app-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        shell: bash
        run: |
          corepack enable
          corepack prepare --activate

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-modrinth-${{ hashFiles('modrinth-source/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-modrinth-

      - name: Install system dependencies (Ubuntu)
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev pkg-config libayatana-appindicator3-dev librsvg2-dev

      - name: Install Node.js dependencies
        run: |
          cd modrinth-source
          echo "üì¶ Installing dependencies..."
          pnpm install
          
          # ÊòæÁ§∫ÂèØÁî®ÁöÑÁøªËØë
          if [ -d "apps/app-frontend/src/locales" ]; then
            echo "üåç Available translations:"
            ls -la apps/app-frontend/src/locales/
          fi

      - name: Build Modrinth App (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          cd modrinth-source/apps/app
          echo "üçé Building Modrinth App for macOS..."
          pnpm run tauri build --target universal-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Build Modrinth App (Windows/Linux)
        if: "!startsWith(matrix.platform, 'macos')"
        run: |
          cd modrinth-source/apps/app
          echo "üèóÔ∏è Building Modrinth App for ${{ matrix.platform }}..."
          pnpm run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: modrinth-app-${{ matrix.platform }}
          path: |
            modrinth-source/apps/app/target/*/release/bundle/*/*.dmg
            modrinth-source/apps/app/target/*/release/bundle/*/*.app.tar.gz
            modrinth-source/apps/app/target/*/release/bundle/*/*.app.tar.gz.sig
            modrinth-source/apps/app/target/release/bundle/*/*.dmg
            modrinth-source/apps/app/target/release/bundle/*/*.app.tar.gz
            modrinth-source/apps/app/target/release/bundle/*/*.app.tar.gz.sig
            modrinth-source/apps/app/target/release/bundle/*/*.AppImage
            modrinth-source/apps/app/target/release/bundle/*/*.AppImage.tar.gz
            modrinth-source/apps/app/target/release/bundle/*/*.AppImage.tar.gz.sig
            modrinth-source/apps/app/target/release/bundle/*/*.deb
            modrinth-source/apps/app/target/release/bundle/*/*.rpm
            modrinth-source/apps/app/target/release/bundle/msi/*.msi
            modrinth-source/apps/app/target/release/bundle/msi/*.msi.zip
            modrinth-source/apps/app/target/release/bundle/msi/*.msi.zip.sig
            modrinth-source/apps/app/target/release/bundle/nsis/*.exe
            modrinth-source/apps/app/target/release/bundle/nsis/*.nsis.zip
            modrinth-source/apps/app/target/release/bundle/nsis/*.nsis.zip.sig
          if-no-files-found: error

  create-release:
    needs: [setup-and-translate, build-apps]
    if: always() && !cancelled() && needs.setup-and-translate.outputs.has-translations == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout translator repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Êî∂ÈõÜÊâÄÊúâÊûÑÂª∫‰∫ßÁâ©
          echo "üì¶ Collecting build artifacts..."
          find artifacts -name "*.dmg" -o -name "*.app.tar.gz" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.msi" -o -name "*.exe" | while read file; do
            filename=$(basename "$file")
            # ÈáçÂëΩÂêç‰ª•ÂåÖÂê´ËØ≠Ë®Ä‰ø°ÊÅØ
            new_name="Modrinth-Multilang-${filename}"
            cp "$file" "release-assets/$new_name"
            echo "  üìÑ $new_name"
          done
          
          # Êî∂ÈõÜÁ≠æÂêçÊñá‰ª∂
          find artifacts -name "*.sig" | while read file; do
            filename=$(basename "$file")
            new_name="Modrinth-Multilang-${filename}"
            cp "$file" "release-assets/$new_name"
          done
          
          echo "üìä Release assets prepared:"
          ls -la release-assets/

      - name: Get release information
        id: release-info
        run: |
          MODRINTH_VERSION="${{ needs.setup-and-translate.outputs.modrinth-version }}"
          RELEASE_NAME="${{ needs.setup-and-translate.outputs.release-name }}"
          RELEASE_TAG="multilang-$MODRINTH_VERSION-$(date +%Y%m%d)"
          
          echo "modrinth-version=$MODRINTH_VERSION" >> $GITHUB_OUTPUT
          echo "release-name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è Release tag: $RELEASE_TAG"
          echo "üì¶ Release name: $RELEASE_NAME"

      - name: Generate release notes
        id: release-notes
        run: |
          MODRINTH_VERSION="${{ steps.release-info.outputs.modrinth-version }}"
          
          cat > release-notes.md << EOF
          # üåç Modrinth App Â§öËØ≠Ë®ÄÁâàÊú¨ - $MODRINTH_VERSION
          
          Âü∫‰∫é Modrinth ÂÆòÊñπÁâàÊú¨ [\`$MODRINTH_VERSION\`](https://github.com/modrinth/code/releases/tag/$MODRINTH_VERSION) ÊûÑÂª∫ÁöÑÂ§öËØ≠Ë®ÄÁâàÊú¨„ÄÇ
          
          ## ‚ú® Êñ∞Â¢ûÂäüËÉΩ
          
          - üåç **Â§öËØ≠Ë®ÄÁïåÈù¢ÊîØÊåÅ**
            - ÁÆÄ‰Ωì‰∏≠Êñá (zh-CN)
            - Êó•ËØ≠ (ja-JP) 
            - Èü©ËØ≠ (ko-KR)
            - Ê≥ïËØ≠ (fr-FR)
            - Âæ∑ËØ≠ (de-DE)
            - Ë•øÁè≠ÁâôËØ≠ (es-ES)
          
          - üîÑ **Ëá™Âä®ÁøªËØëÁ≥ªÁªü**
            - AIÈ©±Âä®ÁöÑÈ´òË¥®ÈáèÁøªËØë
            - Êô∫ËÉΩ‰øùÊåÅÊ†ºÂºèÂíåÂç†‰ΩçÁ¨¶
            - Â¢ûÈáèÊõ¥Êñ∞ÊîØÊåÅ
          
          - üéØ **ÂÆåÊï¥ÂäüËÉΩ‰øùÊåÅ**
            - ÊâÄÊúâÂéüÁâàModrinthÂäüËÉΩ
            - ÂÆåÂÖ®ÂÖºÂÆπÂÆòÊñπÁâàÊú¨
            - Ëá™Âä®ËØ≠Ë®ÄÊ£ÄÊµã
          
          ## üì¶ ‰∏ãËΩΩÊåáÂçó
          
          ### Windows
          - **ÂÆâË£ÖÂåÖ**: \`Modrinth-Multilang-*.exe\` 
          - **‰æøÊê∫Áâà**: \`Modrinth-Multilang-*.msi\`
          
          ### macOS
          - **ÈÄöÁî®ÁâàÊú¨**: \`Modrinth-Multilang-*.dmg\` (ÊîØÊåÅIntel + Apple Silicon)
          
          ### Linux
          - **AppImage**: \`Modrinth-Multilang-*.AppImage\` (ÈÄöÁî®)
          - **Debian/Ubuntu**: \`Modrinth-Multilang-*.deb\`
          - **Red Hat/CentOS**: \`Modrinth-Multilang-*.rpm\`
          
          ## üîê ÂÆâÂÖ®È™åËØÅ
          
          ÊâÄÊúâÊñá‰ª∂ÈÉΩÂåÖÂê´ÂØπÂ∫îÁöÑ \`.sig\` Á≠æÂêçÊñá‰ª∂ÔºåÂèØÁî®‰∫éÈ™åËØÅÊñá‰ª∂ÂÆåÊï¥ÊÄß„ÄÇ
          
          ## üöÄ ‰ΩøÁî®ËØ¥Êòé
          
          1. ‰∏ãËΩΩÂØπÂ∫îÂπ≥Âè∞ÁöÑÂÆâË£ÖÂåÖ
          2. ÂÆâË£ÖÂπ∂ÂêØÂä®Â∫îÁî®
          3. Â∫îÁî®‰ºöÊ†πÊçÆÁ≥ªÁªüËØ≠Ë®ÄËá™Âä®ÈÄâÊã©ÁïåÈù¢ËØ≠Ë®Ä
          4. ‰πüÂèØÂú®ËÆæÁΩÆ‰∏≠ÊâãÂä®ÂàáÊç¢ËØ≠Ë®Ä
          
          ## üìä ÊäÄÊúØ‰ø°ÊÅØ
          
          - **ÂéüÁâàÁâàÊú¨**: $MODRINTH_VERSION
          - **ÊûÑÂª∫Êó∂Èó¥**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **ÁøªËØëÂºïÊìé**: OpenAI GPT-3.5-turbo
          - **ÊûÑÂª∫Á≥ªÁªü**: GitHub Actions
          
          ## üêõ ÈóÆÈ¢òÂèçÈ¶à
          
          Â¶ÇÊûúÈÅáÂà∞ÁøªËØëÈóÆÈ¢òÊàñÂÖ∂‰ªñBugÔºåËØ∑Âú®Êú¨‰ªìÂ∫ìÊèê‰∫§Issue„ÄÇ
          
          ÂØπ‰∫éModrinthÊú¨Ë∫´ÁöÑÂäüËÉΩÈóÆÈ¢òÔºåËØ∑ËÆøÈóÆ[ÂÆòÊñπ‰ªìÂ∫ì](https://github.com/modrinth/code)„ÄÇ
          
          ---
          
          üéâ **ÊÑüË∞¢‰ΩøÁî®ModrinthÂ§öËØ≠Ë®ÄÁâàÊú¨ÔºÅ**
          EOF
          
          echo "Release notes generated"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-info.outputs.release-tag }}
          name: ${{ steps.release-info.outputs.release-name }}
          body_path: release-notes.md
          files: release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release information
        run: |
          echo "‚úÖ Release created successfully!"
          echo "üè∑Ô∏è Tag: ${{ steps.release-info.outputs.release-tag }}"
          echo "üì¶ Name: ${{ steps.release-info.outputs.release-name }}"
          echo "üåç Languages: ${{ needs.setup-and-translate.outputs.languages }}"
          echo "üîó URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release-info.outputs.release-tag }}"